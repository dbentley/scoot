// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package scoot

import (
	"bytes"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type CloudScoot interface {
	// Parameters:
	//  - Job
	RunJob(job *JobDefinition) (r *JobId, err error)
}

type CloudScootClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewCloudScootClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *CloudScootClient {
	return &CloudScootClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewCloudScootClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *CloudScootClient {
	return &CloudScootClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - Job
func (p *CloudScootClient) RunJob(job *JobDefinition) (r *JobId, err error) {
	if err = p.sendRunJob(job); err != nil {
		return
	}
	return p.recvRunJob()
}

func (p *CloudScootClient) sendRunJob(job *JobDefinition) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("RunJob", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := CloudScootRunJobArgs{
		Job: job,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *CloudScootClient) recvRunJob() (value *JobId, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "RunJob" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "RunJob failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "RunJob failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error3 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error4 error
		error4, err = error3.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error4
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "RunJob failed: invalid message type")
		return
	}
	result := CloudScootRunJobResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ir != nil {
		err = result.Ir
		return
	} else if result.Cnsn != nil {
		err = result.Cnsn
		return
	}
	value = result.GetSuccess()
	return
}

type CloudScootProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      CloudScoot
}

func (p *CloudScootProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *CloudScootProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *CloudScootProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewCloudScootProcessor(handler CloudScoot) *CloudScootProcessor {

	self5 := &CloudScootProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self5.processorMap["RunJob"] = &cloudScootProcessorRunJob{handler: handler}
	return self5
}

func (p *CloudScootProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x6 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x6.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x6

}

type cloudScootProcessorRunJob struct {
	handler CloudScoot
}

func (p *cloudScootProcessorRunJob) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := CloudScootRunJobArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RunJob", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := CloudScootRunJobResult{}
	var retval *JobId
	var err2 error
	if retval, err2 = p.handler.RunJob(args.Job); err2 != nil {
		switch v := err2.(type) {
		case *InvalidRequest:
			result.Ir = v
		case *CanNotScheduleNow:
			result.Cnsn = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RunJob: "+err2.Error())
			oprot.WriteMessageBegin("RunJob", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("RunJob", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Job
type CloudScootRunJobArgs struct {
	Job *JobDefinition `thrift:"job,1" json:"job"`
}

func NewCloudScootRunJobArgs() *CloudScootRunJobArgs {
	return &CloudScootRunJobArgs{}
}

var CloudScootRunJobArgs_Job_DEFAULT *JobDefinition

func (p *CloudScootRunJobArgs) GetJob() *JobDefinition {
	if !p.IsSetJob() {
		return CloudScootRunJobArgs_Job_DEFAULT
	}
	return p.Job
}
func (p *CloudScootRunJobArgs) IsSetJob() bool {
	return p.Job != nil
}

func (p *CloudScootRunJobArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CloudScootRunJobArgs) readField1(iprot thrift.TProtocol) error {
	p.Job = &JobDefinition{}
	if err := p.Job.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Job), err)
	}
	return nil
}

func (p *CloudScootRunJobArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RunJob_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CloudScootRunJobArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("job", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:job: ", p), err)
	}
	if err := p.Job.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Job), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:job: ", p), err)
	}
	return err
}

func (p *CloudScootRunJobArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CloudScootRunJobArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ir
//  - Cnsn
type CloudScootRunJobResult struct {
	Success *JobId             `thrift:"success,0" json:"success,omitempty"`
	Ir      *InvalidRequest    `thrift:"ir,1" json:"ir,omitempty"`
	Cnsn    *CanNotScheduleNow `thrift:"cnsn,2" json:"cnsn,omitempty"`
}

func NewCloudScootRunJobResult() *CloudScootRunJobResult {
	return &CloudScootRunJobResult{}
}

var CloudScootRunJobResult_Success_DEFAULT *JobId

func (p *CloudScootRunJobResult) GetSuccess() *JobId {
	if !p.IsSetSuccess() {
		return CloudScootRunJobResult_Success_DEFAULT
	}
	return p.Success
}

var CloudScootRunJobResult_Ir_DEFAULT *InvalidRequest

func (p *CloudScootRunJobResult) GetIr() *InvalidRequest {
	if !p.IsSetIr() {
		return CloudScootRunJobResult_Ir_DEFAULT
	}
	return p.Ir
}

var CloudScootRunJobResult_Cnsn_DEFAULT *CanNotScheduleNow

func (p *CloudScootRunJobResult) GetCnsn() *CanNotScheduleNow {
	if !p.IsSetCnsn() {
		return CloudScootRunJobResult_Cnsn_DEFAULT
	}
	return p.Cnsn
}
func (p *CloudScootRunJobResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CloudScootRunJobResult) IsSetIr() bool {
	return p.Ir != nil
}

func (p *CloudScootRunJobResult) IsSetCnsn() bool {
	return p.Cnsn != nil
}

func (p *CloudScootRunJobResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CloudScootRunJobResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &JobId{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *CloudScootRunJobResult) readField1(iprot thrift.TProtocol) error {
	p.Ir = &InvalidRequest{}
	if err := p.Ir.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ir), err)
	}
	return nil
}

func (p *CloudScootRunJobResult) readField2(iprot thrift.TProtocol) error {
	p.Cnsn = &CanNotScheduleNow{}
	if err := p.Cnsn.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Cnsn), err)
	}
	return nil
}

func (p *CloudScootRunJobResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RunJob_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CloudScootRunJobResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *CloudScootRunJobResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIr() {
		if err := oprot.WriteFieldBegin("ir", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ir: ", p), err)
		}
		if err := p.Ir.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ir), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ir: ", p), err)
		}
	}
	return err
}

func (p *CloudScootRunJobResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCnsn() {
		if err := oprot.WriteFieldBegin("cnsn", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cnsn: ", p), err)
		}
		if err := p.Cnsn.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Cnsn), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cnsn: ", p), err)
		}
	}
	return err
}

func (p *CloudScootRunJobResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CloudScootRunJobResult(%+v)", *p)
}
