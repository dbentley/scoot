// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package scoot

import (
	"bytes"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type JobType int64

const (
	JobType_UNKNOWN    JobType = 1
	JobType_IRON_TESTS JobType = 2
)

func (p JobType) String() string {
	switch p {
	case JobType_UNKNOWN:
		return "UNKNOWN"
	case JobType_IRON_TESTS:
		return "IRON_TESTS"
	}
	return "<UNSET>"
}

func JobTypeFromString(s string) (JobType, error) {
	switch s {
	case "UNKNOWN":
		return JobType_UNKNOWN, nil
	case "IRON_TESTS":
		return JobType_IRON_TESTS, nil
	}
	return JobType(0), fmt.Errorf("not a valid JobType string")
}

func JobTypePtr(v JobType) *JobType { return &v }

func (p JobType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *JobType) UnmarshalText(text []byte) error {
	q, err := JobTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

// Attributes:
//  - Message
type InvalidRequest struct {
	Message *string `thrift:"message,1" json:"message,omitempty"`
}

func NewInvalidRequest() *InvalidRequest {
	return &InvalidRequest{}
}

var InvalidRequest_Message_DEFAULT string

func (p *InvalidRequest) GetMessage() string {
	if !p.IsSetMessage() {
		return InvalidRequest_Message_DEFAULT
	}
	return *p.Message
}
func (p *InvalidRequest) IsSetMessage() bool {
	return p.Message != nil
}

func (p *InvalidRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *InvalidRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Message = &v
	}
	return nil
}

func (p *InvalidRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("InvalidRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *InvalidRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Message)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err)
		}
	}
	return err
}

func (p *InvalidRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InvalidRequest(%+v)", *p)
}

func (p *InvalidRequest) Error() string {
	return p.String()
}

// Attributes:
//  - RetryAfterMs
type CanNotScheduleNow struct {
	RetryAfterMs *int64 `thrift:"retryAfterMs,1" json:"retryAfterMs,omitempty"`
}

func NewCanNotScheduleNow() *CanNotScheduleNow {
	return &CanNotScheduleNow{}
}

var CanNotScheduleNow_RetryAfterMs_DEFAULT int64

func (p *CanNotScheduleNow) GetRetryAfterMs() int64 {
	if !p.IsSetRetryAfterMs() {
		return CanNotScheduleNow_RetryAfterMs_DEFAULT
	}
	return *p.RetryAfterMs
}
func (p *CanNotScheduleNow) IsSetRetryAfterMs() bool {
	return p.RetryAfterMs != nil
}

func (p *CanNotScheduleNow) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CanNotScheduleNow) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.RetryAfterMs = &v
	}
	return nil
}

func (p *CanNotScheduleNow) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CanNotScheduleNow"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CanNotScheduleNow) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRetryAfterMs() {
		if err := oprot.WriteFieldBegin("retryAfterMs", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:retryAfterMs: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.RetryAfterMs)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.retryAfterMs (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:retryAfterMs: ", p), err)
		}
	}
	return err
}

func (p *CanNotScheduleNow) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CanNotScheduleNow(%+v)", *p)
}

func (p *CanNotScheduleNow) Error() string {
	return p.String()
}

// Attributes:
//  - Argv
type Command struct {
	Argv []string `thrift:"argv,1" json:"argv"`
}

func NewCommand() *Command {
	return &Command{}
}

func (p *Command) GetArgv() []string {
	return p.Argv
}
func (p *Command) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Command) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Argv = tSlice
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.Argv = append(p.Argv, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Command) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Command"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Command) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("argv", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:argv: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Argv)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Argv {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:argv: ", p), err)
	}
	return err
}

func (p *Command) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Command(%+v)", *p)
}

// Attributes:
//  - ID
//  - Command
//  - SnapshotId
type Task struct {
	ID         *string  `thrift:"id,1" json:"id,omitempty"`
	Command    *Command `thrift:"command,2,required" json:"command"`
	SnapshotId *string  `thrift:"snapshotId,3" json:"snapshotId,omitempty"`
}

func NewTask() *Task {
	return &Task{}
}

var Task_ID_DEFAULT string

func (p *Task) GetID() string {
	if !p.IsSetID() {
		return Task_ID_DEFAULT
	}
	return *p.ID
}

var Task_Command_DEFAULT *Command

func (p *Task) GetCommand() *Command {
	if !p.IsSetCommand() {
		return Task_Command_DEFAULT
	}
	return p.Command
}

var Task_SnapshotId_DEFAULT string

func (p *Task) GetSnapshotId() string {
	if !p.IsSetSnapshotId() {
		return Task_SnapshotId_DEFAULT
	}
	return *p.SnapshotId
}
func (p *Task) IsSetID() bool {
	return p.ID != nil
}

func (p *Task) IsSetCommand() bool {
	return p.Command != nil
}

func (p *Task) IsSetSnapshotId() bool {
	return p.SnapshotId != nil
}

func (p *Task) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetCommand bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetCommand = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetCommand {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Command is not set"))
	}
	return nil
}

func (p *Task) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = &v
	}
	return nil
}

func (p *Task) readField2(iprot thrift.TProtocol) error {
	p.Command = &Command{}
	if err := p.Command.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Command), err)
	}
	return nil
}

func (p *Task) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SnapshotId = &v
	}
	return nil
}

func (p *Task) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Task"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Task) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ID)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
		}
	}
	return err
}

func (p *Task) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("command", thrift.STRUCT, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:command: ", p), err)
	}
	if err := p.Command.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Command), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:command: ", p), err)
	}
	return err
}

func (p *Task) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSnapshotId() {
		if err := oprot.WriteFieldBegin("snapshotId", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:snapshotId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.SnapshotId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.snapshotId (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:snapshotId: ", p), err)
		}
	}
	return err
}

func (p *Task) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Task(%+v)", *p)
}

// Attributes:
//  - ID
//  - Tasks
type Job struct {
	ID    string  `thrift:"id,1,required" json:"id"`
	Tasks []*Task `thrift:"tasks,2,required" json:"tasks"`
}

func NewJob() *Job {
	return &Job{}
}

func (p *Job) GetID() string {
	return p.ID
}

func (p *Job) GetTasks() []*Task {
	return p.Tasks
}
func (p *Job) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false
	var issetTasks bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetID = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetTasks = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	if !issetTasks {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Tasks is not set"))
	}
	return nil
}

func (p *Job) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Job) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Task, 0, size)
	p.Tasks = tSlice
	for i := 0; i < size; i++ {
		_elem1 := &Task{}
		if err := _elem1.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
		}
		p.Tasks = append(p.Tasks, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Job) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Job"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Job) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *Job) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tasks", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tasks: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tasks)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Tasks {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tasks: ", p), err)
	}
	return err
}

func (p *Job) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Job(%+v)", *p)
}

// Attributes:
//  - Tasks
//  - JobType
type JobDefinition struct {
	Tasks   []*Task  `thrift:"tasks,1,required" json:"tasks"`
	JobType *JobType `thrift:"jobType,2" json:"jobType,omitempty"`
}

func NewJobDefinition() *JobDefinition {
	return &JobDefinition{}
}

func (p *JobDefinition) GetTasks() []*Task {
	return p.Tasks
}

var JobDefinition_JobType_DEFAULT JobType

func (p *JobDefinition) GetJobType() JobType {
	if !p.IsSetJobType() {
		return JobDefinition_JobType_DEFAULT
	}
	return *p.JobType
}
func (p *JobDefinition) IsSetJobType() bool {
	return p.JobType != nil
}

func (p *JobDefinition) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetTasks bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetTasks = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetTasks {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Tasks is not set"))
	}
	return nil
}

func (p *JobDefinition) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Task, 0, size)
	p.Tasks = tSlice
	for i := 0; i < size; i++ {
		_elem2 := &Task{}
		if err := _elem2.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
		}
		p.Tasks = append(p.Tasks, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *JobDefinition) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := JobType(v)
		p.JobType = &temp
	}
	return nil
}

func (p *JobDefinition) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("JobDefinition"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *JobDefinition) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tasks", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tasks: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tasks)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Tasks {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tasks: ", p), err)
	}
	return err
}

func (p *JobDefinition) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetJobType() {
		if err := oprot.WriteFieldBegin("jobType", thrift.I32, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:jobType: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.JobType)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.jobType (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:jobType: ", p), err)
		}
	}
	return err
}

func (p *JobDefinition) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JobDefinition(%+v)", *p)
}
