// Code generated by go-bindata.
// sources:
// config/config.go
// config/local.local
// config/local.memory
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configConfigGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func configConfigGoBytes() ([]byte, error) {
	return bindataRead(
		_configConfigGo,
		"config/config.go",
	)
}

func configConfigGo() (*asset, error) {
	bytes, err := configConfigGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/config.go", size: 0, mode: os.FileMode(420), modTime: time.Unix(1486490202, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configLocalLocal = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8f\x41\x4b\xc3\x40\x10\x85\xef\xf9\x15\xc3\x9e\x8b\x96\x8a\x97\x5c\x5b\x2f\x62\x31\xb4\x01\xcf\xd3\xcd\x64\x5d\xba\xc9\x84\x99\x59\xb1\x48\xff\xbb\xac\x36\x14\xa9\xc7\x7d\xdf\x63\xdf\x37\x5f\x15\x80\x5b\xa7\xac\x46\xe2\x6a\x28\x4f\x00\xd7\x9e\x26\x72\x35\xb8\xc4\x1e\x93\xab\x00\xce\x8b\xd2\x7b\x63\x39\x92\xe8\x6d\x4f\x26\xef\x16\xbf\x51\xc3\x29\xc5\x31\x34\x24\x91\xbb\xc2\x56\x8f\xcb\x41\x67\xfa\x34\xf6\x2c\x9e\x5a\xd4\x63\x1b\x07\xe2\x6c\xae\x06\x93\x4c\x17\xfe\x17\xb8\x87\xe5\x70\x5d\xdf\xfb\x77\xea\x72\x22\x59\xf3\xd8\xc7\x70\x6b\xa1\x86\x46\x7d\x4e\xf3\xd8\x16\x3f\x77\x64\x12\x49\x1b\x92\xf2\xb3\x83\x1a\x56\x17\xb8\xa1\x43\x0e\x5b\xee\xa8\x84\x3d\x26\x9d\x15\x76\xe4\xf9\x83\xe4\x99\x0f\xfa\x3a\xee\x0d\xc5\xf2\x54\x3a\xc5\xf2\xea\x82\x01\x5f\xf8\x1f\x87\x3e\x26\x9a\xf7\x37\x51\xc8\x1b\xcb\xa9\x80\x3b\xf5\xcc\xd6\xa1\xe1\x7d\xe9\x28\x06\x4c\x1c\x7e\xae\xab\xce\xdf\x01\x00\x00\xff\xff\x94\xec\x42\x05\x86\x01\x00\x00")

func configLocalLocalBytes() ([]byte, error) {
	return bindataRead(
		_configLocalLocal,
		"config/local.local",
	)
}

func configLocalLocal() (*asset, error) {
	bytes, err := configLocalLocalBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/local.local", size: 390, mode: os.FileMode(420), modTime: time.Unix(1485880540, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configLocalMemory = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8f\xb1\xce\x82\x40\x10\x84\x7b\x9e\x62\xb3\xf5\x5f\xfc\x5a\x5e\x8b\x95\x91\x68\x80\x17\x38\x60\x40\xe2\xc1\x91\xbb\x3d\x23\x31\xbc\xbb\xb9\x88\x5a\x68\xb9\xdf\x4c\x26\xdf\xde\x13\x22\x4e\x4d\xf0\x02\xc7\x8a\xe2\x49\xc4\xe5\x3c\x81\x15\xf1\x80\xc1\xba\x99\xff\x9e\x34\xb5\x61\x14\x56\xb4\xf9\x4f\x88\x96\x08\xb9\xa8\xcf\x68\x82\x81\x4b\xed\xd8\xf6\xdd\xf7\x82\x17\x2d\x68\x83\x79\x6d\x64\xfa\x96\x43\x5c\x0f\x7f\x82\x2b\xb5\xbf\x30\x29\xda\xae\xe1\x0e\x55\xe8\x32\xdb\x20\xc2\x56\x1b\x8f\x35\xc8\x51\xdb\x2b\xdc\xde\x56\xfe\x38\x16\xa2\x9d\x84\xe9\xdd\xf9\xc8\xe8\x4e\x1f\xec\x0f\x89\xf5\x8d\x58\x4c\x96\x47\x00\x00\x00\xff\xff\xee\x81\x77\x5b\xf2\x00\x00\x00")

func configLocalMemoryBytes() ([]byte, error) {
	return bindataRead(
		_configLocalMemory,
		"config/local.memory",
	)
}

func configLocalMemory() (*asset, error) {
	bytes, err := configLocalMemoryBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/local.memory", size: 242, mode: os.FileMode(420), modTime: time.Unix(1485880540, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/config.go": configConfigGo,
	"config/local.local": configLocalLocal,
	"config/local.memory": configLocalMemory,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"config.go": &bintree{configConfigGo, map[string]*bintree{}},
		"local.local": &bintree{configLocalLocal, map[string]*bintree{}},
		"local.memory": &bintree{configLocalMemory, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

