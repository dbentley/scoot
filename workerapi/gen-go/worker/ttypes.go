// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package worker

import (
	"bytes"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type Status int64

const (
	Status_UNKNOWN   Status = 0
	Status_READY     Status = 1
	Status_PENDING   Status = 2
	Status_RUNNING   Status = 3
	Status_COMPLETED Status = 4
	Status_ABORTED   Status = 5
	Status_TIMEOUT   Status = 6
)

func (p Status) String() string {
	switch p {
	case Status_UNKNOWN:
		return "UNKNOWN"
	case Status_READY:
		return "READY"
	case Status_PENDING:
		return "PENDING"
	case Status_RUNNING:
		return "RUNNING"
	case Status_COMPLETED:
		return "COMPLETED"
	case Status_ABORTED:
		return "ABORTED"
	case Status_TIMEOUT:
		return "TIMEOUT"
	}
	return "<UNSET>"
}

func StatusFromString(s string) (Status, error) {
	switch s {
	case "UNKNOWN":
		return Status_UNKNOWN, nil
	case "READY":
		return Status_READY, nil
	case "PENDING":
		return Status_PENDING, nil
	case "RUNNING":
		return Status_RUNNING, nil
	case "COMPLETED":
		return Status_COMPLETED, nil
	case "ABORTED":
		return Status_ABORTED, nil
	case "TIMEOUT":
		return Status_TIMEOUT, nil
	}
	return Status(0), fmt.Errorf("not a valid Status string")
}

func StatusPtr(v Status) *Status { return &v }

func (p Status) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *Status) UnmarshalText(text []byte) error {
	q, err := StatusFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

// Attributes:
//  - Running
type WorkerStatus struct {
	Running []string `thrift:"running,1,required" json:"running"`
}

func NewWorkerStatus() *WorkerStatus {
	return &WorkerStatus{}
}

func (p *WorkerStatus) GetRunning() []string {
	return p.Running
}
func (p *WorkerStatus) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetRunning bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetRunning = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetRunning {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Running is not set"))
	}
	return nil
}

func (p *WorkerStatus) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Running = tSlice
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.Running = append(p.Running, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *WorkerStatus) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("WorkerStatus"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *WorkerStatus) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("running", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:running: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Running)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Running {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:running: ", p), err)
	}
	return err
}

func (p *WorkerStatus) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WorkerStatus(%+v)", *p)
}

// Attributes:
//  - Status
//  - RunId
//  - OutUri
//  - ErrUri
//  - Info
//  - ExitCode
type RunStatus struct {
	Status   Status  `thrift:"status,1,required" json:"status"`
	RunId    *string `thrift:"runId,2" json:"runId,omitempty"`
	OutUri   *string `thrift:"outUri,3" json:"outUri,omitempty"`
	ErrUri   *string `thrift:"errUri,4" json:"errUri,omitempty"`
	Info     *string `thrift:"info,5" json:"info,omitempty"`
	ExitCode *int32  `thrift:"exitCode,6" json:"exitCode,omitempty"`
}

func NewRunStatus() *RunStatus {
	return &RunStatus{}
}

func (p *RunStatus) GetStatus() Status {
	return p.Status
}

var RunStatus_RunId_DEFAULT string

func (p *RunStatus) GetRunId() string {
	if !p.IsSetRunId() {
		return RunStatus_RunId_DEFAULT
	}
	return *p.RunId
}

var RunStatus_OutUri_DEFAULT string

func (p *RunStatus) GetOutUri() string {
	if !p.IsSetOutUri() {
		return RunStatus_OutUri_DEFAULT
	}
	return *p.OutUri
}

var RunStatus_ErrUri_DEFAULT string

func (p *RunStatus) GetErrUri() string {
	if !p.IsSetErrUri() {
		return RunStatus_ErrUri_DEFAULT
	}
	return *p.ErrUri
}

var RunStatus_Info_DEFAULT string

func (p *RunStatus) GetInfo() string {
	if !p.IsSetInfo() {
		return RunStatus_Info_DEFAULT
	}
	return *p.Info
}

var RunStatus_ExitCode_DEFAULT int32

func (p *RunStatus) GetExitCode() int32 {
	if !p.IsSetExitCode() {
		return RunStatus_ExitCode_DEFAULT
	}
	return *p.ExitCode
}
func (p *RunStatus) IsSetRunId() bool {
	return p.RunId != nil
}

func (p *RunStatus) IsSetOutUri() bool {
	return p.OutUri != nil
}

func (p *RunStatus) IsSetErrUri() bool {
	return p.ErrUri != nil
}

func (p *RunStatus) IsSetInfo() bool {
	return p.Info != nil
}

func (p *RunStatus) IsSetExitCode() bool {
	return p.ExitCode != nil
}

func (p *RunStatus) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetStatus bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetStatus = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetStatus {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Status is not set"))
	}
	return nil
}

func (p *RunStatus) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		temp := Status(v)
		p.Status = temp
	}
	return nil
}

func (p *RunStatus) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.RunId = &v
	}
	return nil
}

func (p *RunStatus) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.OutUri = &v
	}
	return nil
}

func (p *RunStatus) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ErrUri = &v
	}
	return nil
}

func (p *RunStatus) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Info = &v
	}
	return nil
}

func (p *RunStatus) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.ExitCode = &v
	}
	return nil
}

func (p *RunStatus) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RunStatus"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RunStatus) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Status)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err)
	}
	return err
}

func (p *RunStatus) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRunId() {
		if err := oprot.WriteFieldBegin("runId", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:runId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.RunId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.runId (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:runId: ", p), err)
		}
	}
	return err
}

func (p *RunStatus) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutUri() {
		if err := oprot.WriteFieldBegin("outUri", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:outUri: ", p), err)
		}
		if err := oprot.WriteString(string(*p.OutUri)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.outUri (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:outUri: ", p), err)
		}
	}
	return err
}

func (p *RunStatus) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrUri() {
		if err := oprot.WriteFieldBegin("errUri", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:errUri: ", p), err)
		}
		if err := oprot.WriteString(string(*p.ErrUri)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.errUri (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:errUri: ", p), err)
		}
	}
	return err
}

func (p *RunStatus) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetInfo() {
		if err := oprot.WriteFieldBegin("info", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:info: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Info)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.info (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:info: ", p), err)
		}
	}
	return err
}

func (p *RunStatus) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetExitCode() {
		if err := oprot.WriteFieldBegin("exitCode", thrift.I32, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:exitCode: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.ExitCode)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.exitCode (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:exitCode: ", p), err)
		}
	}
	return err
}

func (p *RunStatus) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RunStatus(%+v)", *p)
}

// Attributes:
//  - Argv
//  - SnapshotId
//  - TimeoutMs
type RunCommand struct {
	Argv       []string `thrift:"argv,1,required" json:"argv"`
	SnapshotId *string  `thrift:"snapshotId,2" json:"snapshotId,omitempty"`
	TimeoutMs  *int32   `thrift:"timeoutMs,3" json:"timeoutMs,omitempty"`
}

func NewRunCommand() *RunCommand {
	return &RunCommand{}
}

func (p *RunCommand) GetArgv() []string {
	return p.Argv
}

var RunCommand_SnapshotId_DEFAULT string

func (p *RunCommand) GetSnapshotId() string {
	if !p.IsSetSnapshotId() {
		return RunCommand_SnapshotId_DEFAULT
	}
	return *p.SnapshotId
}

var RunCommand_TimeoutMs_DEFAULT int32

func (p *RunCommand) GetTimeoutMs() int32 {
	if !p.IsSetTimeoutMs() {
		return RunCommand_TimeoutMs_DEFAULT
	}
	return *p.TimeoutMs
}
func (p *RunCommand) IsSetSnapshotId() bool {
	return p.SnapshotId != nil
}

func (p *RunCommand) IsSetTimeoutMs() bool {
	return p.TimeoutMs != nil
}

func (p *RunCommand) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetArgv bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetArgv = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetArgv {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Argv is not set"))
	}
	return nil
}

func (p *RunCommand) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Argv = tSlice
	for i := 0; i < size; i++ {
		var _elem1 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem1 = v
		}
		p.Argv = append(p.Argv, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *RunCommand) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.SnapshotId = &v
	}
	return nil
}

func (p *RunCommand) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TimeoutMs = &v
	}
	return nil
}

func (p *RunCommand) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RunCommand"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RunCommand) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("argv", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:argv: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Argv)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Argv {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:argv: ", p), err)
	}
	return err
}

func (p *RunCommand) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSnapshotId() {
		if err := oprot.WriteFieldBegin("snapshotId", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:snapshotId: ", p), err)
		}
		if err := oprot.WriteString(string(*p.SnapshotId)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.snapshotId (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:snapshotId: ", p), err)
		}
	}
	return err
}

func (p *RunCommand) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeoutMs() {
		if err := oprot.WriteFieldBegin("timeoutMs", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timeoutMs: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.TimeoutMs)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.timeoutMs (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timeoutMs: ", p), err)
		}
	}
	return err
}

func (p *RunCommand) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RunCommand(%+v)", *p)
}
